[
	[1,1,1,1]			ydre længde	 = 1
],						indre længde = 4
[						
	[1],				ydre længde  = 4
	[1],				indre længde = 1
	[1],
	[1]
]

=====

[
	[0,0,1]				ydre længde	 = 2		
	[1,1,1]				indre længde = 3
],						
[
	[1,1],				ydre længde	 = 3
	[0,1],				indre længde = 2
	[0,1],
],	
[u
	[1,1,1]				ydre længde	 = 2
	[1,0,0]				indre længde = 3
],						
[
	[1,0],				ydre længde	 = 3
	[1,0],				indre længde = 2
	[1,1],
]	




0	0	0	0	0	0		1	1	1	1

0	0	0	0	0	0

0	0	0	0	0	0

0	0	0	0	0	0

0	0	0	0	0	0

0	0	0	0	0	0




----
---- I
----

0	1	1	1	1	0		indsættelsespunkt: 	(row.length - shape.variation.maxLength) / 2  = 1
							shape position: 0,1
0	0	0	0	0	0							
												
0	0	0	0	0	0

0	0	0	0	0	0

0	0	0	0	0	0

0	0	0	0	0	0

-----

0	0	0	0	0	0

0	1	1	1	1	0		

0	0	0	0	0	0

0	0	0	0	0	0

0	0	0	0	0	0

0	0	0	0	0	0

-----

0	0	0	0	0	0

0	0	0	0	0	0

0	1	1	1	1	0

0	0	0	0	0	0

0	0	0	0	0	0

0	0	0	0	0	0

-----

0	1	0	0	0	0		rotation

0	1	0	0	0	0

0	1	0	0	0	0

0	1	0	0	0	0

0	0	0	0	0	0

0	0	0	0	0	0

-----

1 ned:

0	0	0	0	0	0

0	1	0	0	0	0

0	1	0	0	0	0

0	1	0	0	0	0

0	1	0	0	0	0

0	0	0	0	0	0

-----

landet:

0	0	0	0	0	0

0	0	0	0	0	0

0	1	0	0	0	0

0	1	0	0	0	0

0	1	0	0	0	0

0	1	0	0	0	0






----
---- L
----						
							[
0	0	0	0	0	0			[1	0],

0	0	0	0	0	0			[1	0],

0	0	0	0	0	0			[1	1]
							]
0	0	0	0	0	0		
							
0	0	0	0	0	0		bot left:  2,-1
							højde-1 - shape.y + y: 2--1+0 = 3	hvis calcY > height -> udenfor grid
0	0	0	0	0	0											hvis calcY == height -> netop kommet ind i grid
																hvis calcY == 0 -> helt inde i grid
-----

0	0	1	1	0	0		indsættelsespunkt: 	(row.length - shape.variation.maxLength) / 2  = 2
							
0	0	0	0	0	0		
							bot left:  2,0
0	0	0	0	0	0		højde-1 - shape.y + y: 2-0+0 = 2

0	0	0	0	0	0

0	0	0	0	0	0

0	0	0	0	0	0

-----

0	0	1	0	0	0		bot left:  2,1
							højde-1 - shape.y + y: 2-1+0 = 1
0	0	1	1	0	0		
							
0	0	0	0	0	0

0	0	0	0	0	0

0	0	0	0	0	0

0	0	0	0	0	0

-----

0	0	1	0	0	0		bot left:  2,2
							højde-1 - shape.y + y: 2-2+0 = 0
0	0	1	0	0	0		
							
0	0	1	1	0	0

0	0	0	0	0	0

0	0	0	0	0	0

0	0	0	0	0	0

-----

0	0	0	0	0	0		bot left:  2,3
							højde-1 - shape.y + y: 2-3+0 = -1
0	0	1	0	0	0		
							
0	0	1	0	0	0

0	0	1	1	0	0

0	0	0	0	0	0

0	0	0	0	0	0

-----

0	0	0	0	0	0		bot left:  2,4
							højde-1 - shape.y + y: 2-4+0 = -2
0	0	0	0	0	0

0	0	1	0	0	0

0	0	1	0	0	0

0	0	1	1	0	0

0	0	0	0	0	0

-----

0	0	0	0	0	0		bot left:  2,5
							højde-1 - shape.y + y: 2-5+0 = -2
0	0	0	0	0	0

0	0	0	0	0	0

0	0	1	0	0	0

0	0	1	0	0	0

0	0	1	1	0	0

-----











----
---- O
----						
							[
0	0	0	0	0	0			[1	1],

0	0	0	0	0	0			[1	1]

0	0	0	0	0	0		]

0	0	0	0	0	0		
							
0	0	0	0	0	0		bot left:  2,-1
							(højde-1) - shape.y + y: 1--1+0 = 2	hvis calcY > height -> udenfor grid
0	0	0	0	0	0											hvis calcY == height -> netop kommet ind i grid
																hvis calcY == 0 -> helt inde i grid
-----

0	0	1	1	0	0		indsættelsespunkt: 	(row.length - shape.variation.maxLength) / 2  = 2
							
0	0	0	0	0	0		
							bot left:  2,0
0	0	0	0	0	0		(højde-1) - shape.y + y  :  1 - 0 + 0 = 1

0	0	0	0	0	0

0	0	0	0	0	0		

0	0	0	0	0	0

-----

0	0	1	1	0	0		
							
0	0	1	1	0	0		bot left:  2,1
							(højde-1) - shape.y + y  :  1 - 1 + 0 = 0
0	0	0	0	0	0

0	0	0	0	0	0

0	0	0	0	0	0		

0	0	0	0	0	0

-----

0	0	0	0	0	0		
							
0	0	1	1	0	0		bot left:  2,2
							højde-1 - shape.y + y: 1-2+0 = -1
0	0	1	1	0	0

0	0	0	0	0	0

0	0	0	0	0	0		

0	0	0	0	0	0

-----

0	0	0	0	0	0		
							
0	0	0	0	0	0		bot left:  2,3
							højde-1 - shape.y + y: 1-3+0 = -2
0	0	1	1	0	0

0	0	1	1	0	0

0	0	0	0	0	0

0	0	0	0	0	0

-----

0	0	0	0	0	0		bot left:  2,4
							højde-1 - shape.y + y: 1-4+0 = -3
0	0	0	0	0	0

0	0	0	0	0	0

0	0	1	1	0	0

0	0	1	1	0	0

0	0	0	0	0	0

-----

0	0	0	0	0	0		bot left:  2,5
							højde-1 - shape.y + y: 1-5+0 = -4
0	0	0	0	0	0

0	0	0	0	0	0

0	0	0	0	0	0

0	0	1	1	0	0

0	0	1	1	0	0

-----

[
	[1,1,1,1]			ydre længde	 = 1
],						indre længde = 4
[						
	[1],				ydre længde  = 4
	[1],				indre længde = 1
	[1],
	[1]
]

=====

[
	[0,0,1]				ydre længde	 = 2		
	[1,1,1]				indre længde = 3
],						
[
	[1,1],				ydre længde	 = 3
	[0,1],				indre længde = 2
	[0,1],
],	
[
	[1,1,1]				ydre længde	 = 2
	[1,0,0]				indre længde = 3
],						
[
	[1,0],				ydre længde	 = 3
	[1,0],				indre længde = 2
	[1,1],
]	


---- COLLISION ----
1 	1 	1 	0 	0 	|	1 	1 	0 	0 	0  	|  	1 	1 	0 	0 	0
0 	1 	0 	0 	0 	|	1 	1 	0 	0 	0  	|  	1 	0 	0 	0 	0
0 	0 	0 	0 	0 	|	0 	0 	0 	0 	0  	|  	1 	0 	0 	0 	0 
1 	0 	0 	0 	0 	|	0 	0 	0 	0 	0  	|  	0 	1 	0 	0 	0
1 	0 	0 	0 	0 	|	1 	0 	0 	0 	0  	|  	0 	1 	0 	0 	0 
1 	0 	0 	0 	0 	|	1 	0 	0 	0 	0  	|  	1 	1 	0 	0 	0
1 	0 	0 	0 	0	|	1 	1 	0 	0 	0  	|  	0 	0 	0 	0 	0

0 	0 	0 	0 	0 	|	0 	0 	0 	0 	0  	|  	0 	0 	0 	0 	0
1 	1 	1 	0 	0 	|	1 	1 	0 	0 	0  	|  	1 	1 	0 	0 	0
0 	1 	0 	0 	0 	|	1 	1 	0 	0 	0  	|  	1 	0 	0 	0 	0 
1 	0 	0 	0 	0 	|	0 	0 	0 	0 	0  	|  	1 	1 	0 	0 	0
1 	0 	0 	0 	0 	|	1 	0 	0 	0 	0  	|  	0 	1 	0 	0 	0 
1 	0 	0 	0 	0 	|	1 	0 	0 	0 	0  	|  	1 	1 	0 	0 	0
1 	0 	0 	0 	0	|	1 	1 	0 	0 	0  	|  	0 	0 	0 	0 	0

0 	0 	0 	0 	0	|	0 	0 	0 	0 	0  	|  	0 	0 	0 	0 	0
0 	0 	0 	0 	0	|	0 	0 	0 	0 	0  	|  	0 	0 	0 	0 	0 
1 	1 	1 	0 	0	|	1 	1 	0 	0 	0  	|  	1 	1 	0 	0 	0
1 	1 	0 	0 	0	|	1 	1 	0 	0 	0  	|  	1 	1 	0 	0 	0
1 	0 	0 	0 	0 	|	1 	0 	0 	0 	0  	|  	1  	1 	0 	0 	0 
1 	0 	0 	0 	0 	|	1 	0 	0 	0 	0  	|  	1 	1 	0 	0 	0
1 	0 	0 	0 	0	|	1 	1 	0 	0 	0  	|	0 	0 	0 	0 	0 

for (var i = 0; i < shape.length; i++) {
	for (var j = 0; j < shape[i].length; j++) {
		if (shape[i][j] === 1) {
			var gridX = shape.topLeft.x + j; 	// 1 + 0
			var gridY = shape.topLeft.y + i;	// 1 + 0
		}
	}
}


---- ROTATION ----

0 	0 	0 	0 	0 		0 	1 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	1 	0 	0 	0 		0 	1 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	1 	1 	0 	0 		0 	1 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0 	1 	0 	0 		0 	1 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0


0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0	1 	1 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	1	1 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0


0 	1 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	1 	1 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0 	1 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0


0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0 	1 	1 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	1	1 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0
0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0 		0 	0 	0 	0 	0


----- Speed / Score -----

100 = 	20   speed
10 	=	 2   speed
1 	= 	 0.2 speed

(1000 - (100 * 0.2)) (20 speed ned pr 100p)

speed = (init - (score * factor))

factor = (0.2 - (score / 100 * 0.005))

SCORE	SPEED

0 		1000 0.2

100 	980.5 (1000 - (100 * 0.195))  0.2 - (100/100) * 0.005

200 	960 (1000 - (200 * 0.190)) 0.2 - ((200/100) * 0.005)

300 	940 0.185

400 	920 0.180

500 	900 0.175

600 	880 0.170

700 	860 0.165

800 	840 0.160

900 	820 0.155

1000 	800 0.150

1100 	800 0.145